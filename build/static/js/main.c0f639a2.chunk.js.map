{"version":3,"sources":["Api.js","view/Dashboard.jsx","reportWebVitals.js","index.js"],"names":["getIssues","a","fetch","res","json","getLabel","useStyles1","makeStyles","theme","root","flexShrink","marginLeft","spacing","TablePaginationActions","props","classes","useTheme","count","page","rowsPerPage","onPageChange","className","IconButton","onClick","event","disabled","direction","Math","ceil","max","useStyles2","table","minWidth","formControl","margin","ButtonGroup","padding","StyledTableRow","withStyles","backgroundColor","palette","action","hover","wrow","width","TableRow","CustomPaginationActionsTable","useState","setPage","setRowsPerPage","rows","setRows","statusBlock","setStatusBlock","arrayVirtual","setArrayVirtual","emptyRows","min","length","onInit","api","response","useEffect","then","Container","component","Paper","Grid","item","lg","FormControl","variant","InputLabel","id","Select","labelId","value","onChange","target","label","MenuItem","Button","type","list","filter","option","state","getDataFilter","color","sort","b","Date","created_at","getDateDesc","getDateDescUp","parseInt","comments","getComments","Table","TableBody","slice","map","data","TableCell","scope","Tooltip","TransitionComponent","Zoom","title","style","Badge","badgeContent","fontWeight","number","moment","format","toString","height","colSpan","TableFooter","TablePagination","rowsPerPageOptions","labelRowsPerPage","SelectProps","inputProps","native","newPage","onRowsPerPageChange","ActionsComponent","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c0f639a2.chunk.js","sourcesContent":["const BASEAPI = 'https://api.github.com/repos/facebook/react/issues?state=all';\r\nconst URILABEL = 'https://api.github.com/repos/facebook/react/labels';\r\n\r\nexport default {\r\n  \r\n    getIssues : async () => {\r\n        const res = await fetch(BASEAPI);\r\n        const json = await res.json();\r\n        return json;\r\n    },\r\n\r\n    getLabel : async () => {\r\n        const res = await fetch(URILABEL);\r\n        const json = await res.json();\r\n        return json;\r\n    }\r\n\r\n\r\n};","import React, { useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { makeStyles, useTheme, withStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableFooter from '@material-ui/core/TableFooter';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport FirstPageIcon from '@material-ui/icons/FirstPage';\r\nimport KeyboardArrowLeft from '@material-ui/icons/KeyboardArrowLeft';\r\nimport KeyboardArrowRight from '@material-ui/icons/KeyboardArrowRight';\r\nimport LastPageIcon from '@material-ui/icons/LastPage';\r\nimport api from '../Api';\r\nimport { useEffect } from 'react';\r\nimport StarsIcon from '@material-ui/icons/Stars';\r\nimport { Badge, Button, ButtonGroup, Container, FormControl, Grid, TableHead, Tooltip } from '@material-ui/core';\r\nimport Zoom from '@material-ui/core/Zoom';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport moment from \"moment\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\n\r\n\r\nconst useStyles1 = makeStyles((theme) => ({\r\n    root: {\r\n        flexShrink: 0,\r\n        marginLeft: theme.spacing(2.5),\r\n    },\r\n\r\n}));\r\n\r\nfunction TablePaginationActions(props) {\r\n    const classes = useStyles1();\r\n    const theme = useTheme();\r\n    const { count, page, rowsPerPage, onPageChange } = props;\r\n\r\n    const handleFirstPageButtonClick = (event) => {\r\n        onPageChange(event, 0);\r\n    };\r\n\r\n    const handleBackButtonClick = (event) => {\r\n        onPageChange(event, page - 1);\r\n    };\r\n\r\n    const handleNextButtonClick = (event) => {\r\n        onPageChange(event, page + 1);\r\n    };\r\n\r\n    const handleLastPageButtonClick = (event) => {\r\n        onPageChange(event, Math.max(0, Math.ceil(count / rowsPerPage) - 1));\r\n    };\r\n\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <IconButton\r\n                onClick={handleFirstPageButtonClick}\r\n                disabled={page === 0}\r\n                aria-label=\"first page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <LastPageIcon /> : <FirstPageIcon />}\r\n            </IconButton>\r\n            <IconButton onClick={handleBackButtonClick} disabled={page === 0} aria-label=\"previous page\">\r\n                {theme.direction === 'rtl' ? <KeyboardArrowRight /> : <KeyboardArrowLeft />}\r\n            </IconButton>\r\n            <IconButton\r\n                onClick={handleNextButtonClick}\r\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n                aria-label=\"next page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <KeyboardArrowLeft /> : <KeyboardArrowRight />}\r\n            </IconButton>\r\n            <IconButton\r\n                onClick={handleLastPageButtonClick}\r\n                disabled={page >= Math.ceil(count / rowsPerPage) - 1}\r\n                aria-label=\"last page\"\r\n            >\r\n                {theme.direction === 'rtl' ? <FirstPageIcon /> : <LastPageIcon />}\r\n            </IconButton>\r\n        </div>\r\n    );\r\n}\r\n\r\nTablePaginationActions.propTypes = {\r\n    count: PropTypes.number.isRequired,\r\n    onPageChange: PropTypes.func.isRequired,\r\n    page: PropTypes.number.isRequired,\r\n    rowsPerPage: PropTypes.number.isRequired,\r\n};\r\n\r\n\r\nconst useStyles2 = makeStyles((theme) => ({\r\n    table: {\r\n        minWidth: 500,\r\n    },\r\n    formControl: {\r\n        margin: theme.spacing(5),\r\n        minWidth: 150\r\n    },\r\n    ButtonGroup: {\r\n        padding: 10\r\n    }\r\n\r\n}));\r\n\r\nconst StyledTableRow = withStyles((theme) => ({\r\n    root: {\r\n        '&:nth-of-type(odd)': {\r\n            backgroundColor: theme.palette.action.hover,\r\n        },\r\n    },\r\n    wrow: {\r\n        width: '555px',\r\n    }\r\n}))(TableRow);\r\n\r\nexport default function CustomPaginationActionsTable() {\r\n    const classes = useStyles2();\r\n    const [page, setPage] = useState([]);\r\n    const [rowsPerPage, setRowsPerPage] = useState(10);\r\n    const [rows, setRows] = useState([]);\r\n    const [statusBlock, setStatusBlock] = useState('full');\r\n    const [arrayVirtual, setArrayVirtual] = useState([]);\r\n\r\n    const emptyRows = rowsPerPage - Math.min(rowsPerPage, rows.length - page * rowsPerPage);\r\n\r\n    const handleChangePage = (event, newPage) => {\r\n        setPage(newPage);\r\n    };\r\n\r\n    const handleChangeRowsPerPage = (event) => {\r\n        setRowsPerPage(parseInt(event.target.value, 10));\r\n        setPage(0);\r\n    };\r\n\r\n    const onInit = async () => {\r\n        const response = await api.getIssues();\r\n        if (response) {\r\n            setRows(response)\r\n            setArrayVirtual(response)\r\n        } else {\r\n            setRows([])\r\n        }\r\n    }\r\n    useEffect(() => {\r\n        onInit().then();\r\n    }, []);\r\n\r\n    const getDataFilter = () => {\r\n        let list = arrayVirtual        \r\n        if (statusBlock !== 'full') {\r\n            list = list.filter(option => {\r\n                return option.state === statusBlock\r\n            })\r\n        }\r\n        setRows(list)\r\n    }\r\n\r\n    const getDateDesc = () => {\r\n        let list = arrayVirtual.sort(function (a, b) {\r\n            return new Date(a.created_at) - new Date(b.created_at);\r\n        })       \r\n        setRows(list)\r\n    }\r\n\r\n    const getDateDescUp = () => {\r\n        let list = arrayVirtual.sort(function (a, b) {\r\n            return new Date(b.created_at) - new Date(a.created_at);\r\n        })        \r\n        setRows(list)\r\n    }\r\n\r\n    const getComments = () => {\r\n        let list = rows.sort(function (a, b) {\r\n            return parseInt(b.comments) - parseInt(a.comments);\r\n        })        \r\n        setRows(list)\r\n    }\r\n\r\n    return (\r\n        <Container component={Paper}>\r\n            <Grid>\r\n                <Grid item lg={6}>\r\n                    <FormControl variant=\"outlined\" className={classes.formControl}>\r\n                        <Grid>\r\n                            <Grid item>\r\n                                <InputLabel id=\"demo-simple-select-outlined-label\">Busca issues</InputLabel>\r\n                                <Select\r\n                                    labelId=\"demo-simple-select-outlined-label\"\r\n                                    id=\"demo-simple-select-outlined\"\r\n                                    value={statusBlock}\r\n                                    onChange={(event) => setStatusBlock(event.target.value)}\r\n                                    label=\"busca issues\"                                >\r\n                                    <MenuItem value={'full'}>Todos</MenuItem>\r\n                                    <MenuItem value={'closed'}>Fechados</MenuItem>\r\n                                    <MenuItem value={'open'}>Abertos</MenuItem>\r\n                                </Select>\r\n                                <Button data-testid=\"selectBtn\" type={'button'} onClick={() => getDataFilter()} className={'btn btn-info'}><SearchIcon\r\n                                /></Button>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </FormControl>\r\n                </Grid>\r\n                <Grid item lg={6} className={classes.ButtonGroup}>\r\n                    <ButtonGroup color=\"secondary\" aria-label=\"outlined secondary button group\">\r\n                        <Button data-testid=\"selectBtn\" type={'button'} onClick={() => getDateDesc()} className={'btn btn-info'}>Mais velho</Button>\r\n                        <Button data-testid=\"selectBtn\" type={'button'} onClick={() => getDateDescUp()} className={'btn btn-info'}>Mais novo</Button>\r\n                        <Button data-testid=\"selectBtn\" type={'button'} onClick={() => getComments()} className={'btn btn-info'}>Mais Comentarios</Button>\r\n\r\n                    </ButtonGroup>\r\n                </Grid>\r\n            </Grid>\r\n            <Table className={classes.table}>\r\n               \r\n                <TableBody>\r\n                    {(rowsPerPage > 0\r\n                        ? rows.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                        : rows\r\n                    ).map((data) => (\r\n                        <StyledTableRow key={data}>\r\n                            <TableCell component=\"th\" scope=\"row\">\r\n                                <Tooltip TransitionComponent={Zoom} title={data.state}>\r\n                                    <StarsIcon style={{ color: data.state === 'open' ? 'green' : 'red' }} />\r\n                                </Tooltip>\r\n                                <h3>{data.title}</h3>\r\n                                <Badge badgeContent={data.comments} color=\"primary\">\r\n                                    <ChatIcon />\r\n                                </Badge>\r\n                                <span style={{ padding: 12, fontWeight: \"800\" }}> #{data.number}</span>\r\n                                <span style={{ fontWeight: \"600\" }}>Data:  {moment(data.created_at).format(\"DD/MM/YYYY HH:mm:ss\").toString()}</span>\r\n                            </TableCell>\r\n                        </StyledTableRow>\r\n                    ))}\r\n\r\n                    {emptyRows > 0 && (\r\n                        <TableRow style={{ height: 53 * emptyRows }}>\r\n                            <TableCell colSpan={6} />\r\n                        </TableRow>\r\n                    )}\r\n                </TableBody>\r\n                <TableFooter>\r\n                    <TableRow>\r\n                        <TablePagination\r\n                            rowsPerPageOptions={[5, 10, { label: 'All', value: -1 }]}\r\n                            labelRowsPerPage={'Linhas por página:'}\r\n                            colSpan={1}\r\n                            count={rows.length}\r\n                            rowsPerPage={rowsPerPage}\r\n                            page={page}\r\n                            SelectProps={{\r\n                                inputProps: { 'aria-label':'rows per page' },\r\n                                native: true,\r\n                            }}\r\n                            onPageChange={handleChangePage}\r\n                            onRowsPerPageChange={handleChangeRowsPerPage}\r\n                            ActionsComponent={TablePaginationActions}\r\n                        />\r\n                    </TableRow>\r\n                </TableFooter>\r\n            </Table>\r\n        </Container>\r\n    );\r\n}\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Dashboard from './view/Dashboard';\nimport reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Dashboard />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}